<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>selenium 踩坑记录（二） xpath和延时</title>
      <link href="/2019/10/28/selenium-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%E4%BA%8C/"/>
      <url>/2019/10/28/selenium-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>不要频繁使用<code>xpath</code>和<code>css selector</code></strong></p><h4 id="不要频繁使用xpath和css-selector"><a href="#不要频繁使用xpath和css-selector" class="headerlink" title="不要频繁使用xpath和css selector"></a>不要频繁使用<code>xpath</code>和<code>css selector</code></h4><h3 id="不要频繁使用xpath和css-selector-1"><a href="#不要频繁使用xpath和css-selector-1" class="headerlink" title="不要频繁使用xpath和css selector"></a>不要频繁使用<code>xpath</code>和<code>css selector</code></h3></blockquote><a id="more"></a><p>能用<code>id</code>就用<code>id</code>，有<code>name</code>用<code>name</code>，没有的话用<code>classname</code>，甚至<code>linktext</code>、<code>tagname</code>都没有的话最后再去选择采用<code>xpath</code>或者<code>css selector</code>，或者采用其他的复合的定位方法进行定位。</p><p><code>xpath</code>定位比较浪费资源，而且它可能会出现一些难以预料到的错误，比如定位元素偏移等。</p><hr><h3 id="多用延时"><a href="#多用延时" class="headerlink" title="多用延时"></a>多用延时</h3><p>在编写测试用例的时候，可能编写的脚本逻辑完全正确，但因为不知道哪里的原因这个脚本跑不通。这个时候，可以在报错或者响应超时的地方适当的加入延时方法，不用太长，一秒钟左右就可以。之后再跑一遍可能就会发现脚本能顺利执行了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> sleep;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 语句</span></span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 语句</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Thread.sleep(<span class="number">800</span>) <span class="comment">// 需要抛出异常</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium 踩坑记录（一） frame/iframe定位</title>
      <link href="/2019/10/23/selenium-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%E4%B8%80/"/>
      <url>/2019/10/23/selenium-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<p>这两天尝试一个页面的自动化测试，看上去很简单的一个页面，然而坑了我两天（</p><p>是这样的，这个页面是个很简单的表单弹窗，但是我死活定位不到这个元素。。。不管用是<code>xpath</code>、<code>id</code>、<code>class</code>等等<br>打开控制台发现原来这是一个iframe弹窗，经过神奇的百度我找到了如下的解决方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.<span class="keyword">switch</span>().frame() <span class="comment">// frame 参数可填frame标签的id或name, 或driver.findElement()</span></span><br></pre></td></tr></table></figure><p><del>然而并没有什么卯月</del></p><a id="more"></a><p>报了<code>No frame element found by name or id xxx</code>错误</p><hr><p>我又尝试用<code>id</code>去定位这个弹窗的顶层元素，结果报了<code>No such element</code>错误：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.findElement(By.className(<span class="string">"popWindow-reduction"</span>))</span><br></pre></td></tr></table></figure><p>通过自己尝试和翻阅各种资料，发现可能是动态id惹的祸</p><p>于是我尝试用粗暴的<code>Actions</code>（python为<code>ActionChains</code>）键鼠操作进行实验然后成功：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Actions actions = <span class="keyword">new</span> Actions(driver);</span><br><span class="line">actions</span><br><span class="line">.click()</span><br><span class="line">.sendKeys(Keys.TAB, <span class="string">"123413551235"</span>, Keys.TAB, Keys.ENTER)</span><br><span class="line">.click()</span><br><span class="line">.sendKeys(Keys.TAB, Keys.ENTER)</span><br><span class="line">.perform();</span><br><span class="line">System.out.println(<span class="string">"执行成功"</span>);</span><br></pre></td></tr></table></figure><p>但是这种方法虽然很方便有效，不过看上去太过凌乱了，而且操作都是我实际在页面上进行操作尝试出来的，比较麻烦</p><p>所以我又开始寻找元素定位的方法，最后得到的代码是这样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 语句太长所以定义一个变量进行存储</span></span><br><span class="line">WebElement iframe = driver.findElement(By.className(<span class="string">"popWindow-box"</span>)).findElement(By.tagName(<span class="string">"iframe"</span>));</span><br><span class="line">driver.switchTo().frame(iframe);    <span class="comment">//切换到frame标签</span></span><br><span class="line">driver.findElement(By.id(<span class="string">"pimNote_content"</span>)).sendKeys(<span class="string">"12345666"</span>);</span><br><span class="line">driver.findElement(By.id(<span class="string">"submitButton"</span>)).click();</span><br><span class="line">driver.switchTo().defaultContent(); <span class="comment">//切换回默认页面</span></span><br><span class="line">driver.findElement(By.xpath(<span class="string">"//*[@id=\"alt1\"]/div[2]/input"</span>)).click();</span><br></pre></td></tr></table></figure><p>为什么要用class进行定位呢？具体的我也没有深究过，不过推测可能是因为这个modal对话框是用jq实时生成的，所有组件内部的id定位无效<br>还有我一开始尝试定位的是modal的根标签<code>#popWindow-all</code>，结果并没有成功，可能是因为这个标签没有高度的原因。</p><p>我也是一边摸索着学习一边记录，如果有不正确或不严谨的地方还请各路大佬斧正。</p><hr><p><strong>补充</strong></p><p><code>driver.switchTo().frame()</code>参数并不是只能传<code>id</code>和<code>name</code>以及<code>WebElement</code>，当上述参数都不能正常使用时可以尝试使用<code>index</code>进行定位，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switchTo().frame(<span class="number">0</span>)<span class="comment">// 跳转到页面第一个frame</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Webdriver 报错 Element not visible 解决方法</title>
      <link href="/2019/10/22/Webdriver-%E6%8A%A5%E9%94%99-Element-not-visible-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/"/>
      <url>/2019/10/22/Webdriver-%E6%8A%A5%E9%94%99-Element-not-visible-%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ol><li><p>首先排除是否是页面未加载完成的问题。页面响应时间比较慢，导致定位的元素还没加载出来，就会报错ElementNotVisible，这时可以在代码里加上一定的等待时间，如：<code>Thread.sleep(3000)</code> 。</p></li><li><p>其次排除是否是定位有问题，可以用chrome浏览器的xpath healper工具来验证<img alt="xpath healper" data-src="/2019/10/22/Webdriver-报错-Element-not-visible-解决方法/1.png">如上图，写的xpath能够定位到页面中相应的元素，定位到的元素黄色显示。</p><a id="more"></a></li><li><p>如果用xpath healper确定能定位到元素，但是跑用例的时候还是报元素不可见异常，这可能是由于用@class属性来定位，特别是class中含有复合类的定位时，也可能会报这个错误，这时可以用其它标签或属性来定位，也可以用xpath的绝对路径来定位</p></li><li><p>上面两步还不能解决的话，就可以检查该元素的样式或父级及以上元素是否含有不可显示属性，需要检查元素是否具备如下特性：</p><blockquote><p>visibility!= hidden<br>display != none (is also checked against every parent element)<br>opacity != 0 (in rc2 this is no longer checked for clicking an element)<br>height and width are both &gt; 0<br>for an input, the attribute type != hidden </p><p>如果有不符上面的特性之一，那么就用js脚本来处理，用js操作元素参考博客：<a href="http://blog.csdn.net/galen2016/article/details/56847545" target="_blank" rel="noopener">http://blog.csdn.net/galen2016/article/details/56847545</a></p></blockquote></li><li><p>还有一种情况，就是选取元素的时候，可能存在两个相同的，但一次只会用一个，这两个区别就有一个样式的属性是不可见的，这个时候选取元素时要去掉不可见属性，如下例子：<img alt="图2" data-src="/2019/10/22/Webdriver-报错-Element-not-visible-解决方法/2.png"><br> 如上图，启用流程按钮滑到右边时，该元素增加了display:none属性，此时如要向左滑可以如下方法来定位 </p> <figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebElement label = driver.findElement(By.xpath(“//div[@class=’el-switch__label el-switch__label’ and not(contains(@style,’display:none’))]”));</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>最后，可能是编写脚本流程没有按照正常的操作步骤来进行,导致操作的元素没有在当前页面。</li></ol><blockquote><p><strong>原作者：</strong><a href="https://blog.csdn.net/galen2016" target="_blank" rel="noopener">灵枢_</a><br><strong>原文链接：</strong><a href="https://www.baidu.com/link?url=u0jn3R7xotsUtIrPQkiJw2gpH5Nr1Hvp_vP1ouaqaePGEom8hcGXIwL_LPpQ5pndVR7dhRa1cE8E8C-yjZ9_DNgnSKGS72Z3He9uXv9_bn7&wd=&eqid=8cfcaae30004d6ef000000025daeca50" target="_blank" rel="noopener">【WebDriver】解决<em>ElementNotVisibleException</em>方法总结…_CSDN博客</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> selenium </tag>
            
            <tag> chromedriver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试用例编写顺序和要点</title>
      <link href="/2019/10/21/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E6%80%BB%E7%BB%93/"/>
      <url>/2019/10/21/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>记录自己在软件测试的学习过程中的要点</p><a id="more"></a><hr><h4 id="模块或功能点开头"><a href="#模块或功能点开头" class="headerlink" title="模块或功能点开头"></a>模块或功能点开头</h4><ul><li>在编写模块非首页或登录页时，第一条用例应该是<ul><li><strong>导航栏有效性验证</strong>：跳转到相应页面</li></ul></li><li>在模块中每个会跳转新页面或弹窗的功能点，开头三条用例：<ul><li>功能测试<ul><li><strong>按钮/文本链接有效性验证</strong>：跳转到页面或弹出窗口</li><li><strong>文字控件显示验证</strong>：描述当前页面的显示内容<ul><li>Title</li><li>面包屑（如果有）</li><li>文字和控件显示（如果有）</li><li>导航栏高亮显示（如果有）</li><li>列表字段（如果为列表页）</li><li>按钮显示（如果有）</li></ul></li><li>如果含<span style="background: yellow">多角色权限</span>，应该拆开编写</li><li>如果含<span style="background: yellow">列表</span>，应该有数据和无数据分开编写</li></ul></li><li>UI测试<ul><li><strong>布局配色合理性验证</strong>：布局美观，配色合理</li><li><strong>文字显示正确性验证</strong>：文字正确无错漏</li></ul></li></ul></li><li>列表页：<ul><li>页码选择器：<ul><li><strong>各个按钮的有效性验证</strong></li><li><strong>首页时上一页按钮不可用验证</strong></li><li><strong>末页时下一页按钮不可用验证</strong></li></ul></li><li>排序：<ul><li><strong>排序正确性验证</strong>：列表按某种规则升序中降序显示全部信息</li></ul></li></ul></li></ul><h4 id="查询功能点"><a href="#查询功能点" class="headerlink" title="查询功能点"></a>查询功能点</h4><ul><li>控件测试：<ul><li><strong>下拉框列表值正确性验证</strong>：下拉列表显示blablabla</li><li><strong>日历控件正确性验证</strong>：日期默认为今天，可选择blablabla，需求说明书已说明</li></ul></li><li>具体的查询：先测试不输入查询条件的情况，再逐个测试单条件，再测试组合条件<ul><li><strong>不输入查询条件，进行查询</strong>：列表显示所有信息</li><li><strong>从下拉框到文本框单条件依次输入，进行查询</strong>：列表显示相应的信息</li><li><strong>输入全部查询条件，进行查询</strong>：同上条</li><li>若文本框可进行模糊查询，应该拆分成==模糊查询和精确查询==两种情况</li></ul></li></ul><h4 id="具体的功能测试"><a href="#具体的功能测试" class="headerlink" title="具体的功能测试"></a>具体的功能测试</h4><p>采用<span style="background: yellow">等价类划分</span>和<span style="background: yellow">边界值分析</span>等白盒测试方法进行编写，无效等价类严格按有效等价类（与或非）取反得到</p><h4 id="模块或功能点结尾"><a href="#模块或功能点结尾" class="headerlink" title="模块或功能点结尾"></a>模块或功能点结尾</h4><ul><li>弹窗：<ul><li><strong>取消按钮有效性验证</strong>：关闭弹窗，返回上一页</li><li><strong>x按钮（若有）有效性验证</strong>：同上</li><li><span style="background: yellow">确定/提交等按钮不需要进行单独验证</span></li></ul></li><li>状态管理：<ul><li><strong>启用按钮有效性验证</strong></li><li><strong>禁用按钮有效性验证</strong></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python-unittest单元测试框架</title>
      <link href="/2019/10/08/Python-unittest%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/10/08/Python-unittest%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是unittest"><a href="#什么是unittest" class="headerlink" title="什么是unittest"></a>什么是<code>unittest</code></h3><p><code>unittest</code>是Python自带的单元测试框架，可以帮我们完成接口自动化测试、UI自动化测试。主要用来组织和执行测试单条测试用例组织在一起执行，同时能够满足如果一条测试用例执行失败，后面的测试执行，并且提供了丰富的断言方法，判断测试用例是否通过，最终生成测试结果。</p><a id="more"></a><hr><h3 id="unittest核心要素"><a href="#unittest核心要素" class="headerlink" title="unittest核心要素"></a><code>unittest</code>核心要素</h3><p><img alt="unittest核心要素" data-src="/2019/10/08/Python-unittest单元测试框架/QQ%E5%9B%BE%E7%89%8720191008213516.png"> </p><!-- <img src="/2019/10/08/Python-unittest单元测试框架/QQ图片20191008213516.png" title="unittest核心要素"> --><hr><h3 id="unittest测试流程"><a href="#unittest测试流程" class="headerlink" title="unittest测试流程"></a><code>unittest</code>测试流程</h3><ol><li>写好<code>TestCase</code>：一个<code>class</code>继承<code>unittest.TestCase</code>，就是一个测试用例，其中有多个以<code>test</code>开头的方法，每一个方法都在<code>load</code>的时候会生成一个<code>TestCase</code>实例。如果一个<code>class</code>中有四个<code>test</code>开头的方法，最后<code>load</code>到<code>suite</code>中时则有四个测试用例。</li><li>由<code>TestLoader</code>加载<code>TestCase</code>到<code>TestSuite</code>。</li><li>由<code>TextTestRunner</code>来运行<code>TestSuite</code>，运行的结果保存在<code>TextTestResult</code>中。</li></ol><p><strong>说明</strong>：</p><p>通过命令行或者<code>unittest.main()</code>执行时，<code>main()</code>会调用<code>TextTestRunner</code>中的<code>run()</code>来执行，或者可以直接通过<code>TextTestRunner</code>来执行用例。<br><code>Runner</code>执行时，默认将结果输出到控制台，我们可以设置其输出到文件，在文件中查看结果，也可以通过<code>HTMLTestRunner</code>将结果输出到<code>HTML</code>。</p><hr><h3 id="unittest框架使用说明"><a href="#unittest框架使用说明" class="headerlink" title="unittest框架使用说明"></a><code>unittest</code>框架使用说明</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest <span class="comment"># 导入测试框架</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>定义一个继承自<code>unittest.TestCase</code>的测试用例类。</p><p>定义<code>setUp()</code>方法、<code>tearDown()</code>方法、<code>setUpClass()</code>方法、<code>tearDownClass()</code>方法，其中<code>setUp()</code>方法指在每个测试用例方法执行前，都会执行一次；<code>tearDown()</code>方法指在每次测试用例方法执行结束后，都会执行一次；<code>setUpClass()</code>方法指在一个测试用例集执行前只执行一次；<code>tearDownClass()</code>方法指在一个测试用例集执行后只执行一次。</p><p>定义测试用例，名字以<code>test</code>开头。<br>一个测试用例应该只测试一个方面，测试目的和测试内容应很明确。主要调用<code>assertEqual</code>、<code>assertRaises</code>等断言方法判断程序执行结果和预期值是否相符。</p><p>调用<code>unittest.main()</code>启动测试。<br>如果测试未通过，会输出相应的错误提示。如果测试全部通过则不显示任何东西。</p>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> selenium </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium自动化测试学习记录</title>
      <link href="/2019/10/07/selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/10/07/selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<h4 id="环境搭建步骤"><a href="#环境搭建步骤" class="headerlink" title="环境搭建步骤"></a>环境搭建步骤</h4><ul><li>安装<code>python</code>环境</li><li>通过<code>pip</code>下载<code>selenium</code><ul><li>打开控制台或者终端</li><li><code>python -m pip install --upgrade pip</code> 更新<code>pip</code>到最新版本</li><li>如果安装失败可试添加<code>--user</code> 如 <code>python -m pip install --user --upgrade pip</code></li><li>安装<code>selenium</code>：<code>pip install [-U] selenium</code></li></ul></li></ul><p>自动化环境搭建完毕</p><a id="more"></a><hr><h4 id="模仿鼠标键盘的链式操作ActionChains"><a href="#模仿鼠标键盘的链式操作ActionChains" class="headerlink" title="模仿鼠标键盘的链式操作ActionChains"></a>模仿鼠标键盘的链式操作<code>ActionChains</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到文本框</span></span><br><span class="line">inp = driver.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链式</span></span><br><span class="line">ActionChains(driver).click().send_keys(<span class="string">'php是世界上最好的语言'</span>).context_click().perform()</span><br></pre></td></tr></table></figure><hr><h4 id="操作js代码进行标签属性的删除"><a href="#操作js代码进行标签属性的删除" class="headerlink" title="操作js代码进行标签属性的删除"></a>操作js代码进行标签属性的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百度主页</span></span><br><span class="line">inp = driver.find_element(By.PARTIAL_LINK_TEXT, <span class="string">'主页 '</span>)</span><br><span class="line"></span><br><span class="line">driver.execute_script(<span class="string">'arguments[0].removeAttribute("target")'</span>, inp)</span><br></pre></td></tr></table></figure><hr><h4 id="driver-implicitly-wait-与time-sleep-的区别"><a href="#driver-implicitly-wait-与time-sleep-的区别" class="headerlink" title="driver.implicitly_wait()与time.sleep()的区别"></a>driver.implicitly_wait()与time.sleep()的区别</h4><blockquote><p>作者：乐乐熊小妹<br>来源：<a href="https://www.cnblogs.com/lelexiong/p/9875157.html" target="_blank" rel="noopener">https://www.cnblogs.com/lelexiong/p/9875157.html</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 隐式等待，5秒钟内只要找到了元素就开始执行，5秒钟未找到超时</span></span><br><span class="line">driver.implictly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 延时5秒执行</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>如何灵活运用这两种方式：</p><p>当某个页面元素变化多，影响多的情况下，用sleep,等页面元素稳定了，再定位。</p><p>如果用implicitly_wait(5)，还没等页面元素稳定后就定位 ，导致定位不准确，比如操作某个元素后，会出现提示框，影响了后面元素的位置，导致定位不准确；所以用sleep,等提示框消失后开始定位</p><hr><h4 id="执行JavaScript语句实现相应操作"><a href="#执行JavaScript语句实现相应操作" class="headerlink" title="执行JavaScript语句实现相应操作"></a>执行<code>JavaScript</code>语句实现相应操作</h4><ul><li><code>driver.execute_script(&#39;&#39;)</code> 在’’里输入js语句</li></ul><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 页面滚动300px</span></span><br><span class="line">driver.execute_script(<span class="string">'window.scrollTo(0, 300)'</span>)</span><br></pre></td></tr></table></figure><hr><h4 id="使用select类进行下拉框值的选择"><a href="#使用select类进行下拉框值的选择" class="headerlink" title="使用select类进行下拉框值的选择"></a>使用<code>select</code>类进行下拉框值的选择</h4><p>可使用<code>selenium</code>提供的<code>select</code>类进行下拉框值的选择</p><p>这里使用的Java语言来描述，演示的是用下拉框文本来选择对应条目<br>也可以用<code>index</code>或<code>value</code>来实现，<code>select</code>类都提供了相应的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Select select = <span class="keyword">new</span> Select(WebElement arg);</span><br><span class="line">select.selectByVisibleText(<span class="string">"下拉选项文本"</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="关于浏览器（含国产）和webdriver等环境配置"><a href="#关于浏览器（含国产）和webdriver等环境配置" class="headerlink" title="关于浏览器（含国产）和webdriver等环境配置"></a>关于浏览器（含国产）和<code>webdriver</code>等环境配置</h4><p>这里以配置国产QQ浏览器为例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 chrome options 配置QQ浏览器启动</span></span><br><span class="line">ChromeOptions op = <span class="keyword">new</span> ChromeOptions();</span><br><span class="line">op.setBinary(<span class="string">"C:\\Program Files (x86)\\Tencent\\QQBrowser\\QQBrowser.exe"</span>);</span><br><span class="line">WebDriver driver = <span class="keyword">new</span> ChromeDriver(op);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// 通过设置环境变量配置QQ浏览器启动</span></span><br><span class="line">System.setProperty(<span class="string">"webdriver.chrome.bin"</span>, <span class="string">"C:\\Program Files (x86)\\Tencent\\QQBrowser\\QQBrowser.exe"</span>);</span><br><span class="line"><span class="comment">// 通过设置环境变量配置 chromedriver</span></span><br><span class="line">System.setProperty(<span class="string">"webdriver.chrome.driver"</span>, <span class="string">"C:\\chromedriver.exe"</span>);</span><br></pre></td></tr></table></figure><hr><h4 id="frame-iframe相关"><a href="#frame-iframe相关" class="headerlink" title="frame/iframe相关"></a>frame/iframe相关</h4><p><code>frame / iframe</code>操作常用的语句：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过 frame / iframe 在页面中的索引进行定位</span></span><br><span class="line">driver.switchTo().frame(<span class="keyword">int</span> index); </span><br><span class="line"><span class="comment">// 通过 frame / iframe 的 id 或 name 进行定位</span></span><br><span class="line">driver.switchTo().frame(String id_or_name);</span><br><span class="line"><span class="comment">// 通过普通方式定位到 frame， 然后再进行跳转</span></span><br><span class="line">driver.switchTo().frame(WebElement element);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到父层（上一层）框架</span></span><br><span class="line">driver.switchTo().parentFrame();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 跳转到初始内容，即原始层</span></span><br><span class="line">driver.switchTo().defaultContent();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自动化测试 </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试用例中重要级别分类记录</title>
      <link href="/2019/10/03/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E4%B8%AD%E9%87%8D%E8%A6%81%E7%BA%A7%E5%88%AB%E5%88%86%E7%B1%BB/"/>
      <url>/2019/10/03/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E4%B8%AD%E9%87%8D%E8%A6%81%E7%BA%A7%E5%88%AB%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>在我们的参赛标准里</p><ul><li>会影响系统运行的读写功能级别都是高，比如crud功能</li><li>查询功能级别是中</li><li>UI相关的级别是低，比如页面正确性验证所在的级别就为低</li></ul><p>而这个标准并不是业界统一的，不同的公司企业制定的标准不同。</p><blockquote><p>记录自老师的原话</p><p>一般以企业给的标准为准，但是各个企业标准不统一，我们比赛的这家企业对这个问题的级别前后说法也不一。一般测试用例的级别区分不太分明，也不太重要，bug的级别非常重要。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 软件测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 功能测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES6相关的新方法记录</title>
      <link href="/2019/09/29/ES6%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/09/29/ES6%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>这篇文章记录一些ES6及以上版本JS中新增添常用的一些特性和方法</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><hr><h4 id="ES6中用来填充字符串的两个新方法"><a href="#ES6中用来填充字符串的两个新方法" class="headerlink" title="ES6中用来填充字符串的两个新方法"></a>ES6中用来填充字符串的两个新方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.padStart(maxLength, fillString = <span class="string">''</span>)</span><br><span class="line"><span class="built_in">String</span>.prototype.padEnd(maxLength, fillString = <span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>顾名思义，<code>padStart</code>是在头部填充，而<code>padEnd</code>是在尾部填充，<code>maxLength</code>为字符串的最短长度，字符串低于这个长度就会进行填充，填充内容为<code>fillString</code></p><a id="more"></a><p>例如进行日期格式化时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟日期转换</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2019</span>;</span><br><span class="line"><span class="keyword">let</span> m = <span class="number">9</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m.padStart(<span class="number">2</span>, <span class="string">'0'</span>)  <span class="comment">// 头部填充，字符串不足2位前补'0'</span></span><br><span class="line">d.padEnd(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;y&#125;</span>年<span class="subst">$&#123;m&#125;</span>月<span class="subst">$&#123;d&#125;</span>日`</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue过滤器的使用</title>
      <link href="/2019/09/27/Vue%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/27/Vue%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="过滤器概念"><a href="#过滤器概念" class="headerlink" title="过滤器概念"></a>过滤器概念</h2><blockquote><p>Vue.js 允许你自定义过滤器，可被用做一些常见的文本格式化，过滤器可以用在两个地方：mustache插值和v-bind表达式。过滤器应该被添加在JavaScript表达式的尾部，有“管道”符指示；</p></blockquote><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 过滤器的定义语法</span></span><br><span class="line">&#123;&#123; name | nameope &#125;&#125;  <span class="comment">// mustache插值表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局过滤器</span></span><br><span class="line">Vue.filter(<span class="string">'nameope'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在这里做一些对mustache插值数据的渲染前处理</span></span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">  <span class="comment">// return 处理完的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><p>过滤器中匿名函数的第一个参数是从管道符前接收到的原值，从第二个参数起可以传入需要参与对原值处理的值<br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'nameope'</span>, (data, arg) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (data + arg)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>过滤器可以多次调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; msg | format | test &#125;&#125;</span><br></pre></td></tr></table></figure><p><code>msg</code> 值会先被 <code>format</code> 处理，处理之后再丢给 <code>test</code> 处理，从左往右依次顺序执行。</p><p>下面是一个对ISO时间字符串进行过滤格式化的实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局的过滤器，进行时间的格式化</span></span><br><span class="line">Vue.filter(<span class="string">'dateFormat'</span>, dateStr =&gt; &#123;</span><br><span class="line">  <span class="comment">// 根据给定的时间字符串得到相应的时间</span></span><br><span class="line">  <span class="keyword">let</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dateStr)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> y = dt.getFullYear()</span><br><span class="line">  <span class="keyword">let</span> m = dt.getMonth() + <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> d = dt.getDate()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>私有过滤器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  filters: &#123;&#125;   <span class="comment">// 这里是私有过滤器</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换NexT主题后的测试页面</title>
      <link href="/2019/09/25/%E6%9B%B4%E6%8D%A2NexT%E4%B8%BB%E9%A2%98%E5%90%8E%E7%9A%84%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/"/>
      <url>/2019/09/25/%E6%9B%B4%E6%8D%A2NexT%E4%B8%BB%E9%A2%98%E5%90%8E%E7%9A%84%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><blockquote><p>1234<br><strong>刚刚更换了NexT的HEXO主题，测试页面</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'hello world'</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ==&gt; out 'hello world'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
