<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ES6相关的新方法记录</title>
      <link href="/2019/09/29/ES6%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
      <url>/2019/09/29/ES6%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>这篇文章记录一些ES6及以上版本JS中新增添常用的一些特性和方法</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><hr><h4 id="ES6中用来填充字符串的两个新方法"><a href="#ES6中用来填充字符串的两个新方法" class="headerlink" title="ES6中用来填充字符串的两个新方法"></a>ES6中用来填充字符串的两个新方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.padStart(maxLength, fillString = <span class="string">''</span>)</span><br><span class="line"><span class="built_in">String</span>.prototype.padEnd(maxLength, fillString = <span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>顾名思义，<code>padStart</code>是在头部填充，而<code>padEnd</code>是在尾部填充，<code>maxLength</code>为字符串的最短长度，字符串低于这个长度就会进行填充，填充内容为<code>fillString</code></p><p>例如进行日期格式化时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟日期转换</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2019</span>;</span><br><span class="line"><span class="keyword">let</span> m = <span class="number">9</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m.padStart(<span class="number">2</span>, <span class="string">'0'</span>)  <span class="comment">// 头部填充，字符串不足2位前补'0'</span></span><br><span class="line">d.padEnd(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;y&#125;</span>年<span class="subst">$&#123;m&#125;</span>月<span class="subst">$&#123;d&#125;</span>日`</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
            <tag> ES6 </tag>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue过滤器的使用</title>
      <link href="/2019/09/27/Vue%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/09/27/Vue%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="过滤器概念"><a href="#过滤器概念" class="headerlink" title="过滤器概念"></a>过滤器概念</h2><blockquote><p>Vue.js 允许你自定义过滤器，可被用做一些常见的文本格式化，过滤器可以用在两个地方：mustache插值和v-bind表达式。过滤器应该被添加在JavaScript表达式的尾部，有“管道”符指示；</p></blockquote><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 过滤器的定义语法</span></span><br><span class="line">&#123;&#123; name | nameope &#125;&#125;  <span class="comment">// mustache插值表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局过滤器</span></span><br><span class="line">Vue.filter(<span class="string">'nameope'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在这里做一些对mustache插值数据的渲染前处理</span></span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">  <span class="comment">// return 处理完的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>过滤器中匿名函数的第一个参数是从管道符前接收到的原值，从第二个参数起可以传入需要参与对原值处理的值<br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'nameope'</span>, (data, arg) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (data + arg)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>过滤器可以多次调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; msg | format | test &#125;&#125;</span><br></pre></td></tr></table></figure><p><code>msg</code> 值会先被 <code>format</code> 处理，处理之后再丢给 <code>test</code> 处理，从左往右依次顺序执行。</p><p>下面是一个对ISO时间字符串进行过滤格式化的实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局的过滤器，进行时间的格式化</span></span><br><span class="line">Vue.filter(<span class="string">'dateFormat'</span>, dateStr =&gt; &#123;</span><br><span class="line">  <span class="comment">// 根据给定的时间字符串得到相应的时间</span></span><br><span class="line">  <span class="keyword">let</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dateStr)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> y = dt.getFullYear()</span><br><span class="line">  <span class="keyword">let</span> m = dt.getMonth() + <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> d = dt.getDate()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>私有过滤器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  filters: &#123;&#125;   <span class="comment">// 这里是私有过滤器</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更换NexT主题后的测试页面</title>
      <link href="/2019/09/25/%E6%9B%B4%E6%8D%A2NexT%E4%B8%BB%E9%A2%98%E5%90%8E%E7%9A%84%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/"/>
      <url>/2019/09/25/%E6%9B%B4%E6%8D%A2NexT%E4%B8%BB%E9%A2%98%E5%90%8E%E7%9A%84%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><blockquote><p>1234<br><strong>刚刚更换了NexT的HEXO主题，测试页面</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'hello world'</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ==&gt; out 'hello world'</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
