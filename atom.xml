<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>紅葉猫的部落格</title>
  
  <subtitle>一个乱七八糟的小站</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://momijineko.xyz/"/>
  <updated>2019-10-09T03:00:37.736Z</updated>
  <id>https://momijineko.xyz/</id>
  
  <author>
    <name>紅葉猫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python-unittest单元测试框架</title>
    <link href="https://momijineko.xyz/2019/10/08/Python-unittest%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6/"/>
    <id>https://momijineko.xyz/2019/10/08/Python-unittest单元测试框架/</id>
    <published>2019-10-08T13:28:58.000Z</published>
    <updated>2019-10-09T03:00:37.736Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是unittest"><a href="#什么是unittest" class="headerlink" title="什么是unittest"></a>什么是<code>unittest</code></h3><p><code>unittest</code>是Python自带的单元测试框架，可以帮我们完成接口自动化测试、UI自动化测试。主要用来组织和执行测试单条测试用例组织在一起执行，同时能够满足如果一条测试用例执行失败，后面的测试执行，并且提供了丰富的断言方法，判断测试用例是否通过，最终生成测试结果。</p><a id="more"></a><hr><h3 id="unittest核心要素"><a href="#unittest核心要素" class="headerlink" title="unittest核心要素"></a><code>unittest</code>核心要素</h3><p><img alt="unittest核心要素" data-src="./../../source%5Cimg%5CQQ%E5%9B%BE%E7%89%8720191008213516.png"></p><hr><h3 id="unittest测试流程"><a href="#unittest测试流程" class="headerlink" title="unittest测试流程"></a><code>unittest</code>测试流程</h3><ol><li>写好<code>TestCase</code>：一个<code>class</code>继承<code>unittest.TestCase</code>，就是一个测试用例，其中有多个以<code>test</code>开头的方法，每一个方法都在<code>load</code>的时候会生成一个<code>TestCase</code>实例。如果一个<code>class</code>中有四个<code>test</code>开头的方法，最后<code>load</code>到<code>suite</code>中时则有四个测试用例。</li><li>由<code>TestLoader</code>加载<code>TestCase</code>到<code>TestSuite</code>。</li><li>由<code>TextTestRunner</code>来运行<code>TestSuite</code>，运行的结果保存在<code>TextTestResult</code>中。</li></ol><p><strong>说明</strong>：</p><p>通过命令行或者<code>unittest.main()</code>执行时，<code>main()</code>会调用<code>TextTestRunner</code>中的<code>run()</code>来执行，或者可以直接通过<code>TextTestRunner</code>来执行用例。<br><code>Runner</code>执行时，默认将结果输出到控制台，我们可以设置其输出到文件，在文件中查看结果，也可以通过<code>HTMLTestRunner</code>将结果输出到<code>HTML</code>。</p><hr><h3 id="unittest框架使用说明"><a href="#unittest框架使用说明" class="headerlink" title="unittest框架使用说明"></a><code>unittest</code>框架使用说明</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest <span class="comment"># 导入测试框架</span></span><br><span class="line">`</span><br></pre></td></tr></table></figure><p>定义一个继承自<code>unittest.TestCase</code>的测试用例类。</p><p>定义<code>setUp()</code>方法、<code>tearDown()</code>方法、<code>setUpClass()</code>方法、<code>tearDownClass()</code>方法，其中<code>setUp()</code>方法指在每个测试用例方法执行前，都会执行一次；<code>tearDown()</code>方法指在每次测试用例方法执行结束后，都会执行一次；<code>setUpClass()</code>方法指在一个测试用例集执行前只执行一次；<code>tearDownClass()</code>方法指在一个测试用例集执行后只执行一次。</p><p>定义测试用例，名字以<code>test</code>开头。<br>一个测试用例应该只测试一个方面，测试目的和测试内容应很明确。主要调用<code>assertEqual</code>、<code>assertRaises</code>等断言方法判断程序执行结果和预期值是否相符。</p><p>调用<code>unittest.main()</code>启动测试。<br>如果测试未通过，会输出相应的错误提示。如果测试全部通过则不显示任何东西。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是unittest&quot;&gt;&lt;a href=&quot;#什么是unittest&quot; class=&quot;headerlink&quot; title=&quot;什么是unittest&quot;&gt;&lt;/a&gt;什么是&lt;code&gt;unittest&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;unittest&lt;/code&gt;是Python自带的单元测试框架，可以帮我们完成接口自动化测试、UI自动化测试。主要用来组织和执行测试单条测试用例组织在一起执行，同时能够满足如果一条测试用例执行失败，后面的测试执行，并且提供了丰富的断言方法，判断测试用例是否通过，最终生成测试结果。&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件测试" scheme="https://momijineko.xyz/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="自动化测试" scheme="https://momijineko.xyz/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="selenium" scheme="https://momijineko.xyz/tags/selenium/"/>
    
      <category term="Python" scheme="https://momijineko.xyz/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>selenium自动化测试学习记录</title>
    <link href="https://momijineko.xyz/2019/10/07/selenium%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
    <id>https://momijineko.xyz/2019/10/07/selenium自动化测试学习记录/</id>
    <published>2019-10-07T06:43:59.000Z</published>
    <updated>2019-10-08T08:01:55.553Z</updated>
    
    <content type="html"><![CDATA[<h4 id="环境搭建步骤"><a href="#环境搭建步骤" class="headerlink" title="环境搭建步骤"></a>环境搭建步骤</h4><ul><li>安装<code>python</code>环境</li><li>通过<code>pip</code>下载<code>selenium</code><ul><li>打开控制台或者终端</li><li><code>python -m pip install --upgrade pip</code> 更新<code>pip</code>到最新版本</li><li>如果安装失败可试添加<code>--user</code> 如 <code>python -m pip install --user --upgrade pip</code></li><li>安装<code>selenium</code>：<code>pip install [-U] selenium</code></li></ul></li></ul><p>自动化环境搭建完毕</p><a id="more"></a><hr><h4 id="模仿鼠标键盘的链式操作ActionChains"><a href="#模仿鼠标键盘的链式操作ActionChains" class="headerlink" title="模仿鼠标键盘的链式操作ActionChains"></a>模仿鼠标键盘的链式操作<code>ActionChains</code></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">'https://www.baidu.com'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位到文本框</span></span><br><span class="line">inp = driver.find_element_by_id(<span class="string">'kw'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 链式</span></span><br><span class="line">ActionChains(driver).click().send_keys(<span class="string">'php是世界上最好的语言'</span>).context_click().perform()</span><br></pre></td></tr></table></figure><hr><h4 id="操作js代码进行标签属性的删除"><a href="#操作js代码进行标签属性的删除" class="headerlink" title="操作js代码进行标签属性的删除"></a>操作js代码进行标签属性的删除</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 百度主页</span></span><br><span class="line">inp = driver.find_element(By.PARTIAL_LINK_TEXT, <span class="string">'主页 '</span>)</span><br><span class="line"></span><br><span class="line">driver.execute_script(<span class="string">'arguments[0].removeAttribute("target")'</span>, inp)</span><br></pre></td></tr></table></figure><hr><h4 id="driver-implicitly-wait-与time-sleep-的区别"><a href="#driver-implicitly-wait-与time-sleep-的区别" class="headerlink" title="driver.implicitly_wait()与time.sleep()的区别"></a>driver.implicitly_wait()与time.sleep()的区别</h4><blockquote><p>作者：乐乐熊小妹<br>来源：<a href="https://www.cnblogs.com/lelexiong/p/9875157.html" target="_blank" rel="noopener">https://www.cnblogs.com/lelexiong/p/9875157.html</a></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 隐式等待，5秒钟内只要找到了元素就开始执行，5秒钟未找到超时</span></span><br><span class="line">driver.implictly_wait(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 延时5秒执行</span></span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>如何灵活运用这两种方式：</p><p>当某个页面元素变化多，影响多的情况下，用sleep,等页面元素稳定了，再定位。</p><p>如果用implicitly_wait(5)，还没等页面元素稳定后就定位 ，导致定位不准确，比如操作某个元素后，会出现提示框，影响了后面元素的位置，导致定位不准确；所以用sleep,等提示框消失后开始定位</p><hr><h4 id="执行JavaScript语句实现相应操作"><a href="#执行JavaScript语句实现相应操作" class="headerlink" title="执行JavaScript语句实现相应操作"></a>执行<code>JavaScript</code>语句实现相应操作</h4><ul><li><code>driver.execute_script(&#39;&#39;)</code> 在’’里输入js语句</li></ul><p>比如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 页面滚动300px</span></span><br><span class="line">driver.execute_script(<span class="string">'window.scrollTo(0, 300)'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;环境搭建步骤&quot;&gt;&lt;a href=&quot;#环境搭建步骤&quot; class=&quot;headerlink&quot; title=&quot;环境搭建步骤&quot;&gt;&lt;/a&gt;环境搭建步骤&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;安装&lt;code&gt;python&lt;/code&gt;环境&lt;/li&gt;
&lt;li&gt;通过&lt;code&gt;pip&lt;/code&gt;下载&lt;code&gt;selenium&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;打开控制台或者终端&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python -m pip install --upgrade pip&lt;/code&gt; 更新&lt;code&gt;pip&lt;/code&gt;到最新版本&lt;/li&gt;
&lt;li&gt;如果安装失败可试添加&lt;code&gt;--user&lt;/code&gt; 如 &lt;code&gt;python -m pip install --user --upgrade pip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装&lt;code&gt;selenium&lt;/code&gt;：&lt;code&gt;pip install [-U] selenium&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自动化环境搭建完毕&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件测试" scheme="https://momijineko.xyz/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="自动化测试" scheme="https://momijineko.xyz/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95/"/>
    
      <category term="selenium" scheme="https://momijineko.xyz/tags/selenium/"/>
    
  </entry>
  
  <entry>
    <title>测试用例中重要级别分类记录</title>
    <link href="https://momijineko.xyz/2019/10/03/%E6%B5%8B%E8%AF%95%E7%94%A8%E4%BE%8B%E4%B8%AD%E9%87%8D%E8%A6%81%E7%BA%A7%E5%88%AB%E5%88%86%E7%B1%BB/"/>
    <id>https://momijineko.xyz/2019/10/03/测试用例中重要级别分类/</id>
    <published>2019-10-03T13:56:35.000Z</published>
    <updated>2019-10-07T06:45:08.597Z</updated>
    
    <content type="html"><![CDATA[<p>在我们的参赛标准里</p><ul><li>会影响系统运行的读写功能级别都是高，比如crud功能</li><li>查询功能级别是中</li><li>UI相关的级别是低，比如页面正确性验证所在的级别就为低</li></ul><p>而这个标准并不是业界统一的，不同的公司企业制定的标准不同。</p><blockquote><p>记录自老师的原话</p><p>一般以企业给的标准为准，但是各个企业标准不统一，我们比赛的这家企业对这个问题的级别前后说法也不一。一般测试用例的级别区分不太分明，也不太重要，bug的级别非常重要。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在我们的参赛标准里&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;会影响系统运行的读写功能级别都是高，比如crud功能&lt;/li&gt;
&lt;li&gt;查询功能级别是中&lt;/li&gt;
&lt;li&gt;UI相关的级别是低，比如页面正确性验证所在的级别就为低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;而这个标准并不是业界统一的，不同的公
      
    
    </summary>
    
    
      <category term="软件测试" scheme="https://momijineko.xyz/categories/%E8%BD%AF%E4%BB%B6%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="功能测试" scheme="https://momijineko.xyz/tags/%E5%8A%9F%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>ES6相关的新方法记录</title>
    <link href="https://momijineko.xyz/2019/09/29/ES6%E7%9B%B8%E5%85%B3%E7%9A%84%E6%96%B0%E6%96%B9%E6%B3%95%E8%AE%B0%E5%BD%95/"/>
    <id>https://momijineko.xyz/2019/09/29/ES6相关的新方法记录/</id>
    <published>2019-09-29T03:01:30.000Z</published>
    <updated>2019-10-08T08:02:25.191Z</updated>
    
    <content type="html"><![CDATA[<p>这篇文章记录一些ES6及以上版本JS中新增添常用的一些特性和方法</p><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><hr><h4 id="ES6中用来填充字符串的两个新方法"><a href="#ES6中用来填充字符串的两个新方法" class="headerlink" title="ES6中用来填充字符串的两个新方法"></a>ES6中用来填充字符串的两个新方法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.prototype.padStart(maxLength, fillString = <span class="string">''</span>)</span><br><span class="line"><span class="built_in">String</span>.prototype.padEnd(maxLength, fillString = <span class="string">''</span>)</span><br></pre></td></tr></table></figure><p>顾名思义，<code>padStart</code>是在头部填充，而<code>padEnd</code>是在尾部填充，<code>maxLength</code>为字符串的最短长度，字符串低于这个长度就会进行填充，填充内容为<code>fillString</code></p><a id="more"></a><p>例如进行日期格式化时：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 模拟日期转换</span></span><br><span class="line"><span class="keyword">let</span> y = <span class="number">2019</span>;</span><br><span class="line"><span class="keyword">let</span> m = <span class="number">9</span></span><br><span class="line"><span class="keyword">let</span> d = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">m.padStart(<span class="number">2</span>, <span class="string">'0'</span>)  <span class="comment">// 头部填充，字符串不足2位前补'0'</span></span><br><span class="line">d.padEnd(<span class="number">2</span>, <span class="string">'0'</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;y&#125;</span>年<span class="subst">$&#123;m&#125;</span>月<span class="subst">$&#123;d&#125;</span>日`</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇文章记录一些ES6及以上版本JS中新增添常用的一些特性和方法&lt;/p&gt;
&lt;h2 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;/a&gt;String&lt;/h2&gt;&lt;hr&gt;
&lt;h4 id=&quot;ES6中用来填充字符串的两个新方法&quot;&gt;&lt;a href=&quot;#ES6中用来填充字符串的两个新方法&quot; class=&quot;headerlink&quot; title=&quot;ES6中用来填充字符串的两个新方法&quot;&gt;&lt;/a&gt;ES6中用来填充字符串的两个新方法&lt;/h4&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.prototype.padStart(maxLength, fillString = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt;.prototype.padEnd(maxLength, fillString = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;p&gt;顾名思义，&lt;code&gt;padStart&lt;/code&gt;是在头部填充，而&lt;code&gt;padEnd&lt;/code&gt;是在尾部填充，&lt;code&gt;maxLength&lt;/code&gt;为字符串的最短长度，字符串低于这个长度就会进行填充，填充内容为&lt;code&gt;fillString&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://momijineko.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="JavaScript" scheme="https://momijineko.xyz/tags/JavaScript/"/>
    
      <category term="ES6" scheme="https://momijineko.xyz/tags/ES6/"/>
    
      <category term="JS" scheme="https://momijineko.xyz/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Vue过滤器的使用</title>
    <link href="https://momijineko.xyz/2019/09/27/Vue%E8%BF%87%E6%BB%A4%E5%99%A8%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://momijineko.xyz/2019/09/27/Vue过滤器的使用/</id>
    <published>2019-09-27T11:53:36.000Z</published>
    <updated>2019-10-08T08:03:01.674Z</updated>
    
    <content type="html"><![CDATA[<h2 id="过滤器概念"><a href="#过滤器概念" class="headerlink" title="过滤器概念"></a>过滤器概念</h2><blockquote><p>Vue.js 允许你自定义过滤器，可被用做一些常见的文本格式化，过滤器可以用在两个地方：mustache插值和v-bind表达式。过滤器应该被添加在JavaScript表达式的尾部，有“管道”符指示；</p></blockquote><p>代码示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 过滤器的定义语法</span></span><br><span class="line">&#123;&#123; name | nameope &#125;&#125;  <span class="comment">// mustache插值表达式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局过滤器</span></span><br><span class="line">Vue.filter(<span class="string">'nameope'</span>, data =&gt; &#123;</span><br><span class="line">  <span class="comment">// 在这里做一些对mustache插值数据的渲染前处理</span></span><br><span class="line">  <span class="keyword">return</span> data</span><br><span class="line">  <span class="comment">// return 处理完的数据</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><p>过滤器中匿名函数的第一个参数是从管道符前接收到的原值，从第二个参数起可以传入需要参与对原值处理的值<br>如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'nameope'</span>, (data, arg) =&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> (data + arg)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>过滤器可以多次调用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123; msg | format | test &#125;&#125;</span><br></pre></td></tr></table></figure><p><code>msg</code> 值会先被 <code>format</code> 处理，处理之后再丢给 <code>test</code> 处理，从左往右依次顺序执行。</p><p>下面是一个对ISO时间字符串进行过滤格式化的实例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 全局的过滤器，进行时间的格式化</span></span><br><span class="line">Vue.filter(<span class="string">'dateFormat'</span>, dateStr =&gt; &#123;</span><br><span class="line">  <span class="comment">// 根据给定的时间字符串得到相应的时间</span></span><br><span class="line">  <span class="keyword">let</span> dt = <span class="keyword">new</span> <span class="built_in">Date</span>(dateStr)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> y = dt.getFullYear()</span><br><span class="line">  <span class="keyword">let</span> m = dt.getMonth() + <span class="number">1</span></span><br><span class="line">  <span class="keyword">let</span> d = dt.getDate()</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">`<span class="subst">$&#123;y&#125;</span>-<span class="subst">$&#123;m&#125;</span>-<span class="subst">$&#123;d&#125;</span>`</span></span><br></pre></td></tr></table></figure><p>私有过滤器：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  methods: &#123;&#125;,</span><br><span class="line">  filters: &#123;&#125;   <span class="comment">// 这里是私有过滤器</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;过滤器概念&quot;&gt;&lt;a href=&quot;#过滤器概念&quot; class=&quot;headerlink&quot; title=&quot;过滤器概念&quot;&gt;&lt;/a&gt;过滤器概念&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;Vue.js 允许你自定义过滤器，可被用做一些常见的文本格式化，过滤器可以用在两个地方：mustache插值和v-bind表达式。过滤器应该被添加在JavaScript表达式的尾部，有“管道”符指示；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码示例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 过滤器的定义语法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&amp;#123; name | nameope &amp;#125;&amp;#125;  &lt;span class=&quot;comment&quot;&gt;// mustache插值表达式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 全局过滤器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vue.filter(&lt;span class=&quot;string&quot;&gt;&#39;nameope&#39;&lt;/span&gt;, data =&amp;gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 在这里做一些对mustache插值数据的渲染前处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// return 处理完的数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="编程" scheme="https://momijineko.xyz/categories/%E7%BC%96%E7%A8%8B/"/>
    
    
      <category term="Vue" scheme="https://momijineko.xyz/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>更换NexT主题后的测试页面</title>
    <link href="https://momijineko.xyz/2019/09/25/%E6%9B%B4%E6%8D%A2NexT%E4%B8%BB%E9%A2%98%E5%90%8E%E7%9A%84%E6%B5%8B%E8%AF%95%E9%A1%B5%E9%9D%A2/"/>
    <id>https://momijineko.xyz/2019/09/25/更换NexT主题后的测试页面/</id>
    <published>2019-09-25T04:02:33.000Z</published>
    <updated>2019-09-29T03:23:07.625Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><blockquote><p>1234<br><strong>刚刚更换了NexT的HEXO主题，测试页面</strong></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'hello world'</span></span><br><span class="line"><span class="built_in">console</span>.log(a) <span class="comment">// ==&gt; out 'hello world'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;一级标题&quot;&gt;&lt;a href=&quot;#一级标题&quot; class=&quot;headerlink&quot; title=&quot;一级标题&quot;&gt;&lt;/a&gt;一级标题&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;1234&lt;br&gt;&lt;strong&gt;刚刚更换了NexT的HEXO主题，测试页面&lt;/strong&gt;&lt;/p
      
    
    </summary>
    
    
    
      <category term="NexT" scheme="https://momijineko.xyz/tags/NexT/"/>
    
  </entry>
  
</feed>
